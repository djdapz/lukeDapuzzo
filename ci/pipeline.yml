---
resources:

  - name: repo
    type: git
    source:
      uri: ((git-repo))
      private_key: ((github-private-key))

  - name: openjdk
    type: docker-image
    source:
      repository: openjdk
      tag: 8

  - name: alpine
    type: docker-image
    source:
      repository: alpine
      tag: latest

  - name: postgres
    type: docker-image
    source:
      repository: postgres

  - name: cypress-image
    type: docker-image
    source:
      repository: cypress/browsers
      tag: chrome67

  - name: openjdk-node-cf
    type: docker-image
    source:
      repository: djdapz/openjdk-node-cf

  - name: dcind
    type: docker-image
    source:
      repository: amidos/dcind

  - name: acceptance
    type: cf
    source:
      api: https://api.run.pivotal.io
      username: ((PCF_USERNAME))
      password: ((PCF_PASSWORD))
      organization: dapuzzo
      space: development

  - name: production
    type: cf
    source:
      api: https://api.run.pivotal.io
      username: ((PCF_USERNAME))
      password: ((PCF_PASSWORD))
      organization: dapuzzo
      space: production

  - name: frontend-s3
    type: s3
    source:
      region_name: us-west-2
      bucket: luke-dapuzzo
      regexp: frontend/frontend-(.*).zip
      access_key_id: ((AWS_ACCESS_KEY_ID))
      secret_access_key: ((AWS_SECRET_ACCESS_KEY))

  - name: backend-s3
    type: s3
    source:
      region_name: us-west-2
      bucket: luke-dapuzzo
      regexp: backend/backend-(.*).jar
      access_key_id: ((AWS_ACCESS_KEY_ID))
      secret_access_key: ((AWS_SECRET_ACCESS_KEY))

  - name: after-midnight
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/Chicago


  - name: version
    type: semver
    source:
      driver: git
      uri: git@github.com:djdapz/lukeDapuzzo.git
      branch: version
      file: version
      private_key: ((github-private-key))

jobs:
  - name: stop-dev-environment
    public: true
    plan:
      - get: openjdk-node-cf
        params: {save: true}
      - get: after-midnight
        trigger: true
      - task: stop-frontend
        privileged: true
        image: openjdk-node-cf
        config:
          platform: linux
          run:
            path: sh
            args:
              - -exc
              - |
                set -e
                cf login -a https://api.run.pivotal.io -u ${PCF_USERNAME} -p ${PCF_PASSWORD} -s development -o dapuzzo
                cf stop luke-dapuzzo-api-dev
                cf stop luke-dapuzzo-client
        params:
          PCF_USERNAME: ((PCF_USERNAME))
          PCF_PASSWORD: ((PCF_PASSWORD))


  - name: run-tests-frontend
    public: true
    plan:
      - get: version
      - get: repo
        trigger: true
      - get: cypress-image
        params: {save: true}
      - task: run-tests
        privileged: true
        image: cypress-image
        config:
          platform: linux
          inputs:
            - name: repo
          caches:
            - path: repo/frontend/node_modules
            - path: ../../../root/.cache
          run:
            path: sh
            args:
              - -exc
              - |
                set -e
                cd repo/frontend
                npm i
                npm run test:int:ci

  - name: run-tests-backend
    public: true
    plan:
      - get: version
      - get: repo
        trigger: true
      - get: openjdk
        params: {save: true}
      - get: postgres
        params: {save: true}
      - get: dcind
        params: {save: true}
      - task: run-tests
        privileged: true
        config:
          platform: linux
          inputs:
            - name: repo
            - name: postgres
            - name: openjdk
          caches:
            - path: gradle

          run:
            path: sh
            args:
              - -exc
              - |
                set -e
                source /docker-lib.sh

                start_docker

                docker load -i postgres/image
                docker tag "$(cat postgres/image-id)" "$(cat postgres/repository):$(cat postgres/tag)"

                docker load -i openjdk/image
                docker tag "$(cat openjdk/image-id)" "$(cat openjdk/repository):$(cat openjdk/tag)"


                docker images

                docker-compose -f repo/ci/docker-compose.tests.yml run unit-integration-tests

                docker-compose -f repo/ci/docker-compose.tests.yml down
                docker volume rm $(docker volume ls -q)

  - name: bump-version
    public: true
    plan:
      - get: repo
        passed: ["run-tests-backend", "run-tests-frontend"]
      - get: version
        passed: ["run-tests-backend", "run-tests-frontend"]
        trigger: true
      - put: version
        params: {bump: patch}
  - name: build-and-upload-frontend
    public: true
    plan:
      - get: version
        trigger: true
        passed: ["bump-version"]
      - get: repo
        passed: ["bump-version"]
      - get: openjdk-node-cf
        params: {save: true}
      - task: build-and-upload
        privileged: true
        image: openjdk-node-cf
        config:
          platform: linux
          inputs:
            - name: repo
            - name: version
          outputs:
            - name: frontend-s3
          caches:
            - path: repo/frontend/node_modules
            - path: ../../../root/.cache
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                export BUILD_VERSION=`cat version/number`

                cd repo/frontend
                npm install
                npm run build
                cd ..

                cd frontend-server
                rm -rf build
                cp -rf ../frontend/build ./build
                npm install
                zip -r ../../frontend-s3/frontend-${BUILD_VERSION}.zip *
      - put: frontend-s3
        params:
          file: frontend-s3/frontend-*.zip
  - name: build-and-upload-backend
    public: true
    plan:
      - get: version
        trigger: true
        passed: ["bump-version"]
      - get: repo
        passed: ["bump-version"]
      - get: openjdk
        params: {save: true}
      - task: build-and-upload
        privileged: true
        image: openjdk
        config:
          platform: linux
          inputs:
            - name: repo
            - name: version
          outputs:
            - name: backend-s3
          caches:
            - path: gradle
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                GRADLE_HOME="${HOME}/.gradle"
                ROOT_FOLDER=$(pwd)
                GRADLE_CACHE="${ROOT_FOLDER}/gradle"

                if [ "$GRADLE_CACHE" != "$GRADLE_HOME" ];
                    then
                        ln -s $GRADLE_CACHE $GRADLE_HOME
                fi

                cd HOME
                ls -lsa

                export BUILD_VERSION=`cat version/number`
                cd repo

                ./gradlew clean assemble -Pversion=$BUILD_VERSION
                pwd
                cp build/libs/luke-dapuzzo-${BUILD_VERSION}.jar ../backend-s3/backend-${BUILD_VERSION}.jar

      - put: backend-s3
        params:
          file: backend-s3/backend-*.jar



  - name: deploy-frontend-acceptance
    plan:
      - get: repo
        passed: [ "build-and-upload-frontend"]
      - get: alpine
        params: {save: true}
      - get: frontend-s3
        passed:  ["build-and-upload-frontend"]
        trigger: true
      - task: deploy
        privileged: true
        image: alpine
        config:
          platform: linux
          inputs:
            - name: repo
            - name: frontend-s3
          outputs:
            - name: deploy
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                cp frontend-s3/frontend-*.zip  ./deploy/frontend.zip
                cp ./repo/ci/manifests/development/client-manifest.yml ./deploy/manifest-frontend.yml
          params:
            AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
      - put: acceptance
        params:
          inputs:
            - name: deploy
          path: deploy/frontend.zip
          manifest: deploy/manifest-frontend.yml



  - name: deploy-backend-acceptance
    plan:
      - get: repo
        passed: ["build-and-upload-backend"]
      - get: alpine
        params: {save: true}
      - get: backend-s3
        passed:  ["build-and-upload-backend"]
        trigger: true
      - task: download
        privileged: true
        image: alpine
        config:
          platform: linux
          inputs:
            - name: repo
            - name: backend-s3
          outputs:
            - name: deploy
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                cp backend-s3/backend-*.jar  ./deploy/backend.jar
                cp ./repo/ci/manifests/development/server-manifest.yml ./deploy/manifest-backend.yml
          params:
            AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
      - put: acceptance
        params:
          inputs:
            - name: deploy
          path: deploy/backend.jar
          manifest: deploy/manifest-backend.yml

  - name: e2e-tests
    plan:
      - get: repo
        trigger: true
        passed: ["deploy-backend-acceptance", "deploy-frontend-acceptance"]
      - get: frontend-s3
        passed:  ["deploy-frontend-acceptance"]
      - get: backend-s3
        passed:  ["deploy-backend-acceptance"]
      - get: cypress-image
        params: {save: true}
      - task: download-jar
        privileged: true
        image: cypress-image
        config:
          platform: linux
          inputs:
            - name: repo
          caches:
            - path: repo/e2e/node_modules
            - path: ../../../root/.cache
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                cd repo/e2e
                ls -lsa node_modules
                npm i
                npm run test:headless


  - name: deploy-frontend-production
    plan:
      - get: repo
        passed: [ "e2e-tests"]
      - get: alpine
        params: {save: true}
      - get: frontend-s3
        passed:  ["e2e-tests"]
        trigger: true
      - task: deploy
        privileged: true
        image: alpine
        config:
          platform: linux
          inputs:
            - name: repo
            - name: frontend-s3
          outputs:
            - name: deploy
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                cp frontend-s3/frontend-*.zip  ./deploy/frontend.zip
                cp ./repo/ci/manifests/production/client-manifest.yml ./deploy/manifest-frontend.yml
          params:
            AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
      - put: production
        params:
          inputs:
            - name: deploy
          path: deploy/frontend.zip
          manifest: deploy/manifest-frontend.yml



  - name: deploy-backend-production
    plan:
      - get: repo
        passed: ["e2e-tests"]
      - get: alpine
        params: {save: true}
      - get: backend-s3
        passed:  ["e2e-tests"]
        trigger: true
      - task: download
        privileged: true
        image: alpine
        config:
          platform: linux
          inputs:
            - name: repo
            - name: backend-s3
          outputs:
            - name: deploy
          run:
            path: sh
            args:
              - -exc
              - |
                #!/bin/bash
                set -ex

                cp backend-s3/backend-*.jar  ./deploy/backend.jar
                cp ./repo/ci/manifests/production/server-manifest.yml ./deploy/manifest-backend.yml
          params:
            AWS_ACCESS_KEY_ID: ((AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((AWS_SECRET_ACCESS_KEY))
      - put: production
        params:
          inputs:
            - name: deploy
          path: deploy/backend.jar
          manifest: deploy/manifest-backend.yml